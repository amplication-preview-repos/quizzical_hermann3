/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosData } from "./PosData";
import { PosDataCountArgs } from "./PosDataCountArgs";
import { PosDataFindManyArgs } from "./PosDataFindManyArgs";
import { PosDataFindUniqueArgs } from "./PosDataFindUniqueArgs";
import { DeletePosDataArgs } from "./DeletePosDataArgs";
import { PosDataService } from "../posData.service";
@graphql.Resolver(() => PosData)
export class PosDataResolverBase {
  constructor(protected readonly service: PosDataService) {}

  async _posDataItemsMeta(
    @graphql.Args() args: PosDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosData])
  async posDataItems(
    @graphql.Args() args: PosDataFindManyArgs
  ): Promise<PosData[]> {
    return this.service.posDataItems(args);
  }

  @graphql.Query(() => PosData, { nullable: true })
  async posData(
    @graphql.Args() args: PosDataFindUniqueArgs
  ): Promise<PosData | null> {
    const result = await this.service.posData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosData)
  async deletePosData(
    @graphql.Args() args: DeletePosDataArgs
  ): Promise<PosData | null> {
    try {
      return await this.service.deletePosData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
