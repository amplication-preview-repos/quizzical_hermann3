/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosDataService } from "../posData.service";
import { PosDataCreateInput } from "./PosDataCreateInput";
import { PosData } from "./PosData";
import { PosDataFindManyArgs } from "./PosDataFindManyArgs";
import { PosDataWhereUniqueInput } from "./PosDataWhereUniqueInput";
import { PosDataUpdateInput } from "./PosDataUpdateInput";

export class PosDataControllerBase {
  constructor(protected readonly service: PosDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosData })
  async createPosData(
    @common.Body() data: PosDataCreateInput
  ): Promise<PosData> {
    return await this.service.createPosData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosData] })
  @ApiNestedQuery(PosDataFindManyArgs)
  async posDataItems(@common.Req() request: Request): Promise<PosData[]> {
    const args = plainToClass(PosDataFindManyArgs, request.query);
    return this.service.posDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posData(
    @common.Param() params: PosDataWhereUniqueInput
  ): Promise<PosData | null> {
    const result = await this.service.posData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosData(
    @common.Param() params: PosDataWhereUniqueInput,
    @common.Body() data: PosDataUpdateInput
  ): Promise<PosData | null> {
    try {
      return await this.service.updatePosData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosData(
    @common.Param() params: PosDataWhereUniqueInput
  ): Promise<PosData | null> {
    try {
      return await this.service.deletePosData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
