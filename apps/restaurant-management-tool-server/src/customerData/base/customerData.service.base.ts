/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CustomerData as PrismaCustomerData } from "@prisma/client";

export class CustomerDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerData.count(args);
  }

  async customerDataItems(
    args: Prisma.CustomerDataFindManyArgs
  ): Promise<PrismaCustomerData[]> {
    return this.prisma.customerData.findMany(args);
  }
  async customerData(
    args: Prisma.CustomerDataFindUniqueArgs
  ): Promise<PrismaCustomerData | null> {
    return this.prisma.customerData.findUnique(args);
  }
  async createCustomerData(
    args: Prisma.CustomerDataCreateArgs
  ): Promise<PrismaCustomerData> {
    return this.prisma.customerData.create(args);
  }
  async updateCustomerData(
    args: Prisma.CustomerDataUpdateArgs
  ): Promise<PrismaCustomerData> {
    return this.prisma.customerData.update(args);
  }
  async deleteCustomerData(
    args: Prisma.CustomerDataDeleteArgs
  ): Promise<PrismaCustomerData> {
    return this.prisma.customerData.delete(args);
  }
}
