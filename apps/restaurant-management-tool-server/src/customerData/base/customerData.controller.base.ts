/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerDataService } from "../customerData.service";
import { CustomerDataCreateInput } from "./CustomerDataCreateInput";
import { CustomerData } from "./CustomerData";
import { CustomerDataFindManyArgs } from "./CustomerDataFindManyArgs";
import { CustomerDataWhereUniqueInput } from "./CustomerDataWhereUniqueInput";
import { CustomerDataUpdateInput } from "./CustomerDataUpdateInput";

export class CustomerDataControllerBase {
  constructor(protected readonly service: CustomerDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerData })
  async createCustomerData(
    @common.Body() data: CustomerDataCreateInput
  ): Promise<CustomerData> {
    return await this.service.createCustomerData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerData] })
  @ApiNestedQuery(CustomerDataFindManyArgs)
  async customerDataItems(
    @common.Req() request: Request
  ): Promise<CustomerData[]> {
    const args = plainToClass(CustomerDataFindManyArgs, request.query);
    return this.service.customerDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerData(
    @common.Param() params: CustomerDataWhereUniqueInput
  ): Promise<CustomerData | null> {
    const result = await this.service.customerData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerData(
    @common.Param() params: CustomerDataWhereUniqueInput,
    @common.Body() data: CustomerDataUpdateInput
  ): Promise<CustomerData | null> {
    try {
      return await this.service.updateCustomerData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerData(
    @common.Param() params: CustomerDataWhereUniqueInput
  ): Promise<CustomerData | null> {
    try {
      return await this.service.deleteCustomerData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
