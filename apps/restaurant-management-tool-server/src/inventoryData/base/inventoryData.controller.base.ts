/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InventoryDataService } from "../inventoryData.service";
import { InventoryDataCreateInput } from "./InventoryDataCreateInput";
import { InventoryData } from "./InventoryData";
import { InventoryDataFindManyArgs } from "./InventoryDataFindManyArgs";
import { InventoryDataWhereUniqueInput } from "./InventoryDataWhereUniqueInput";
import { InventoryDataUpdateInput } from "./InventoryDataUpdateInput";

export class InventoryDataControllerBase {
  constructor(protected readonly service: InventoryDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InventoryData })
  async createInventoryData(
    @common.Body() data: InventoryDataCreateInput
  ): Promise<InventoryData> {
    return await this.service.createInventoryData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InventoryData] })
  @ApiNestedQuery(InventoryDataFindManyArgs)
  async inventoryDataItems(
    @common.Req() request: Request
  ): Promise<InventoryData[]> {
    const args = plainToClass(InventoryDataFindManyArgs, request.query);
    return this.service.inventoryDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InventoryData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async inventoryData(
    @common.Param() params: InventoryDataWhereUniqueInput
  ): Promise<InventoryData | null> {
    const result = await this.service.inventoryData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InventoryData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInventoryData(
    @common.Param() params: InventoryDataWhereUniqueInput,
    @common.Body() data: InventoryDataUpdateInput
  ): Promise<InventoryData | null> {
    try {
      return await this.service.updateInventoryData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InventoryData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInventoryData(
    @common.Param() params: InventoryDataWhereUniqueInput
  ): Promise<InventoryData | null> {
    try {
      return await this.service.deleteInventoryData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
