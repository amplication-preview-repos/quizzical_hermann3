/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InventoryData } from "./InventoryData";
import { InventoryDataCountArgs } from "./InventoryDataCountArgs";
import { InventoryDataFindManyArgs } from "./InventoryDataFindManyArgs";
import { InventoryDataFindUniqueArgs } from "./InventoryDataFindUniqueArgs";
import { DeleteInventoryDataArgs } from "./DeleteInventoryDataArgs";
import { InventoryDataService } from "../inventoryData.service";
@graphql.Resolver(() => InventoryData)
export class InventoryDataResolverBase {
  constructor(protected readonly service: InventoryDataService) {}

  async _inventoryDataItemsMeta(
    @graphql.Args() args: InventoryDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InventoryData])
  async inventoryDataItems(
    @graphql.Args() args: InventoryDataFindManyArgs
  ): Promise<InventoryData[]> {
    return this.service.inventoryDataItems(args);
  }

  @graphql.Query(() => InventoryData, { nullable: true })
  async inventoryData(
    @graphql.Args() args: InventoryDataFindUniqueArgs
  ): Promise<InventoryData | null> {
    const result = await this.service.inventoryData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InventoryData)
  async deleteInventoryData(
    @graphql.Args() args: DeleteInventoryDataArgs
  ): Promise<InventoryData | null> {
    try {
      return await this.service.deleteInventoryData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
